// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bid", id.toString(), this);
  }

  static load(id: string): Bid | null {
    return store.get("Bid", id) as Bid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    return value.toString();
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get accepter(): string | null {
    let value = this.get("accepter");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set accepter(value: string | null) {
    if (value === null) {
      this.unset("accepter");
    } else {
      this.set("accepter", Value.fromString(value as string));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get details(): Bytes {
    let value = this.get("details");
    return value.toBytes();
  }

  set details(value: Bytes) {
    this.set("details", Value.fromBytes(value));
  }

  get increases(): Array<string> {
    let value = this.get("increases");
    return value.toStringArray();
  }

  set increases(value: Array<string>) {
    this.set("increases", Value.fromStringArray(value));
  }

  get withdraws(): Array<string> {
    let value = this.get("withdraws");
    return value.toStringArray();
  }

  set withdraws(value: Array<string>) {
    this.set("withdraws", Value.fromStringArray(value));
  }

  get network(): string {
    let value = this.get("network");
    return value.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createTxHash(): Bytes {
    let value = this.get("createTxHash");
    return value.toBytes();
  }

  set createTxHash(value: Bytes) {
    this.set("createTxHash", Value.fromBytes(value));
  }

  get acceptedAt(): BigInt | null {
    let value = this.get("acceptedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set acceptedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("acceptedAt");
    } else {
      this.set("acceptedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get acceptTxHash(): Bytes | null {
    let value = this.get("acceptTxHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set acceptTxHash(value: Bytes | null) {
    if (value === null) {
      this.unset("acceptTxHash");
    } else {
      this.set("acceptTxHash", Value.fromBytes(value as Bytes));
    }
  }

  get canceledAt(): BigInt | null {
    let value = this.get("canceledAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledAt(value: BigInt | null) {
    if (value === null) {
      this.unset("canceledAt");
    } else {
      this.set("canceledAt", Value.fromBigInt(value as BigInt));
    }
  }

  get cancelTxHash(): Bytes | null {
    let value = this.get("cancelTxHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelTxHash(value: Bytes | null) {
    if (value === null) {
      this.unset("cancelTxHash");
    } else {
      this.set("cancelTxHash", Value.fromBytes(value as Bytes));
    }
  }
}

export class Submitter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Submitter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Submitter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Submitter", id.toString(), this);
  }

  static load(id: string): Submitter | null {
    return store.get("Submitter", id) as Submitter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidsSubmitted(): Array<string> {
    let value = this.get("bidsSubmitted");
    return value.toStringArray();
  }

  set bidsSubmitted(value: Array<string>) {
    this.set("bidsSubmitted", Value.fromStringArray(value));
  }
}

export class Accepter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Accepter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Accepter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Accepter", id.toString(), this);
  }

  static load(id: string): Accepter | null {
    return store.get("Accepter", id) as Accepter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidsAccepted(): Array<string> {
    let value = this.get("bidsAccepted");
    return value.toStringArray();
  }

  set bidsAccepted(value: Array<string>) {
    this.set("bidsAccepted", Value.fromStringArray(value));
  }
}

export class BidIncrease extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BidIncrease entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BidIncrease entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BidIncrease", id.toString(), this);
  }

  static load(id: string): BidIncrease | null {
    return store.get("BidIncrease", id) as BidIncrease | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bid(): string {
    let value = this.get("bid");
    return value.toString();
  }

  set bid(value: string) {
    this.set("bid", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class BidWithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BidWithdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BidWithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BidWithdraw", id.toString(), this);
  }

  static load(id: string): BidWithdraw | null {
    return store.get("BidWithdraw", id) as BidWithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bid(): string {
    let value = this.get("bid");
    return value.toString();
  }

  set bid(value: string) {
    this.set("bid", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}
