// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BidAccepted extends ethereum.Event {
  get params(): BidAccepted__Params {
    return new BidAccepted__Params(this);
  }
}

export class BidAccepted__Params {
  _event: BidAccepted;

  constructor(event: BidAccepted) {
    this._event = event;
  }

  get acceptedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BidCanceled extends ethereum.Event {
  get params(): BidCanceled__Params {
    return new BidCanceled__Params(this);
  }
}

export class BidCanceled__Params {
  _event: BidCanceled;

  constructor(event: BidCanceled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BidIncreased extends ethereum.Event {
  get params(): BidIncreased__Params {
    return new BidIncreased__Params(this);
  }
}

export class BidIncreased__Params {
  _event: BidIncreased;

  constructor(event: BidIncreased) {
    this._event = event;
  }

  get newAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BidWithdrawn extends ethereum.Event {
  get params(): BidWithdrawn__Params {
    return new BidWithdrawn__Params(this);
  }
}

export class BidWithdrawn__Params {
  _event: BidWithdrawn;

  constructor(event: BidWithdrawn) {
    this._event = event;
  }

  get newAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewBid extends ethereum.Event {
  get params(): NewBid__Params {
    return new NewBid__Params(this);
  }
}

export class NewBid__Params {
  _event: NewBid;

  constructor(event: NewBid) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get submitter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get details(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class GuildAuctionQueue__bidsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Bytes;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Bytes,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }
}

export class GuildAuctionQueue extends ethereum.SmartContract {
  static bind(address: Address): GuildAuctionQueue {
    return new GuildAuctionQueue("GuildAuctionQueue", address);
  }

  bids(param0: BigInt): GuildAuctionQueue__bidsResult {
    let result = super.call(
      "bids",
      "bids(uint256):(uint256,address,uint256,bytes32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GuildAuctionQueue__bidsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBytes(),
      result[4].toI32()
    );
  }

  try_bids(param0: BigInt): ethereum.CallResult<GuildAuctionQueue__bidsResult> {
    let result = super.tryCall(
      "bids",
      "bids(uint256):(uint256,address,uint256,bytes32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GuildAuctionQueue__bidsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBytes(),
        value[4].toI32()
      )
    );
  }

  destination(): Address {
    let result = super.call("destination", "destination():(address)", []);

    return result[0].toAddress();
  }

  try_destination(): ethereum.CallResult<Address> {
    let result = super.tryCall("destination", "destination():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isMember(user: Address): boolean {
    let result = super.call("isMember", "isMember(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isMember(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMember", "isMember(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockupPeriod(): BigInt {
    let result = super.call("lockupPeriod", "lockupPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockupPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockupPeriod", "lockupPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  moloch(): Address {
    let result = super.call("moloch", "moloch():(address)", []);

    return result[0].toAddress();
  }

  try_moloch(): ethereum.CallResult<Address> {
    let result = super.tryCall("moloch", "moloch():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newBidId(): BigInt {
    let result = super.call("newBidId", "newBidId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_newBidId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("newBidId", "newBidId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _moloch(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lockupPeriod(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptBidCall extends ethereum.Call {
  get inputs(): AcceptBidCall__Inputs {
    return new AcceptBidCall__Inputs(this);
  }

  get outputs(): AcceptBidCall__Outputs {
    return new AcceptBidCall__Outputs(this);
  }
}

export class AcceptBidCall__Inputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptBidCall__Outputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }
}

export class CancelBidCall extends ethereum.Call {
  get inputs(): CancelBidCall__Inputs {
    return new CancelBidCall__Inputs(this);
  }

  get outputs(): CancelBidCall__Outputs {
    return new CancelBidCall__Outputs(this);
  }
}

export class CancelBidCall__Inputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelBidCall__Outputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }
}

export class IncreaseBidCall extends ethereum.Call {
  get inputs(): IncreaseBidCall__Inputs {
    return new IncreaseBidCall__Inputs(this);
  }

  get outputs(): IncreaseBidCall__Outputs {
    return new IncreaseBidCall__Outputs(this);
  }
}

export class IncreaseBidCall__Inputs {
  _call: IncreaseBidCall;

  constructor(call: IncreaseBidCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseBidCall__Outputs {
  _call: IncreaseBidCall;

  constructor(call: IncreaseBidCall) {
    this._call = call;
  }
}

export class SubmitBidCall extends ethereum.Call {
  get inputs(): SubmitBidCall__Inputs {
    return new SubmitBidCall__Inputs(this);
  }

  get outputs(): SubmitBidCall__Outputs {
    return new SubmitBidCall__Outputs(this);
  }
}

export class SubmitBidCall__Inputs {
  _call: SubmitBidCall;

  constructor(call: SubmitBidCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _details(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitBidCall__Outputs {
  _call: SubmitBidCall;

  constructor(call: SubmitBidCall) {
    this._call = call;
  }
}

export class WithdrawBidCall extends ethereum.Call {
  get inputs(): WithdrawBidCall__Inputs {
    return new WithdrawBidCall__Inputs(this);
  }

  get outputs(): WithdrawBidCall__Outputs {
    return new WithdrawBidCall__Outputs(this);
  }
}

export class WithdrawBidCall__Inputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBidCall__Outputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }
}
